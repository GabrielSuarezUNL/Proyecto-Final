/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import controlador.ControladorCliente;
import controlador.ControladorFactura;
import controlador.ControladorProducto;
import java.text.NumberFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.Producto;

public class GenerarFactura extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(GenerarFactura.class.getName());

    // Controladores para manejar la lógica de negocio
    private final ControladorFactura ctrlFactura;
    private final ControladorCliente ctrlCliente;
    private final ControladorProducto ctrlProducto;

    // Modelo de tabla para mostrar los productos de la factura
    private final DefaultTableModel modeloTabla;

    /**
     * Creates new form vi
     */
    public GenerarFactura() {
        initComponents();

        // 1. Inicialización de controladores
        ctrlCliente = new ControladorCliente();
        ctrlProducto = new ControladorProducto();
        ctrlFactura = new ControladorFactura(ctrlCliente, ctrlProducto);

        // 2. Configuración de la tabla de productos
        modeloTabla = (DefaultTableModel) tablaFactura.getModel();
        modeloTabla.setColumnIdentifiers(new String[]{
            "Código",
            "Nombre",
            "Cantidad",
            "P. Unitario",
            "Subtotal"
        });

        // 3. Configuración inicial de la interfaz
        configurarInterfaz();
        cargarDatosIniciales();

    }

    // Método para configurar propiedades de la interfaz
    private void configurarInterfaz() {
        // Campos de cliente como solo lectura
        txtDniCliente.setEditable(false);
        txtNombreCliente.setEditable(false);
        txtApellidoCliente.setEditable(false);
        txtTelefonoCliente.setEditable(false);
        txtDireccionCliente.setEditable(false);

        // Limpiar tabla al iniciar
        modeloTabla.setRowCount(0);

        // Inicializar etiquetas de totales con valores cero
        actualizarTotales(0.0, 0.0, 0.0);
    }

    // Carga inicial de datos (clientes y productos)
    private void cargarDatosIniciales() {
        cargarClientes();
        cargarProductos();
    }

    // Carga clientes en el ComboBox
    private void cargarClientes() {
        comboClientes.removeAllItems();
        for (Cliente c : ctrlCliente.getClientes()) {
            comboClientes.addItem(c.getDni() + " - " + c.getNombres() + " " + c.getApellidos());
        }
    }

    // Carga productos en el ComboBox
    private void cargarProductos() {
        comboProductos.removeAllItems();
        for (Producto p : ctrlProducto.getProductos()) {
            comboProductos.addItem(p.getCodigo() + " - " + p.getNombre()
                    + " (Stock: " + p.getStock() + ")");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboClientes = new javax.swing.JComboBox<>();
        txtDniCliente = new javax.swing.JTextField();
        txtTelefonoCliente = new javax.swing.JTextField();
        txtNombreCliente = new javax.swing.JTextField();
        txtDireccionCliente = new javax.swing.JTextField();
        txtApellidoCliente = new javax.swing.JTextField();
        comboProductos = new javax.swing.JComboBox<>();
        txtCantidad = new javax.swing.JTextField();
        btnAgregarProducto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaFactura = new javax.swing.JTable();
        btnFinalizarVenta = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        lblIva12 = new javax.swing.JLabel();
        lblSubtotal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboClientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClientesActionPerformed(evt);
            }
        });

        comboProductos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProductosActionPerformed(evt);
            }
        });

        btnAgregarProducto.setText("Agregar Producto");
        btnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoActionPerformed(evt);
            }
        });

        tablaFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Código", "Nombre", "Cantidad", "Precio Unitario", "Subtotal"
            }
        ));
        jScrollPane1.setViewportView(tablaFactura);

        btnFinalizarVenta.setText("Generar Factura");
        btnFinalizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarVentaActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lblTotal.setText("jLabel1");

        lblIva12.setText("jLabel1");

        lblSubtotal.setText("jLabel1");

        jLabel1.setText("Ingresa la cantidad a comprar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtTelefonoCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(txtDniCliente, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNombreCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(txtDireccionCliente))
                        .addGap(76, 76, 76)
                        .addComponent(txtApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregarProducto)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboProductos, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1))
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFinalizarVenta)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancelar))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(80, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotal)
                    .addComponent(lblIva12)
                    .addComponent(lblSubtotal))
                .addGap(200, 200, 200))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefonoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(btnAgregarProducto))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(lblSubtotal)
                .addGap(18, 18, 18)
                .addComponent(lblIva12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTotal)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnFinalizarVenta))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClientesActionPerformed
        // TODO add your handling code here:

        if (comboClientes.getSelectedItem() != null) {
            String dni = comboClientes.getSelectedItem().toString().split(" - ")[0];
            cargarDatosCliente(dni);
        }

    }//GEN-LAST:event_comboClientesActionPerformed

    private void comboProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProductosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboProductosActionPerformed

    private void btnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoActionPerformed
        // TODO add your handling code here:

        try {
            // Validar selección y cantidad
            if (comboProductos.getSelectedItem() == null || txtCantidad.getText().trim().isEmpty()) {
                mostrarError("Seleccione un producto y cantidad");
                return;
            }

            // Extraer código del producto seleccionado
            String[] datosProducto = comboProductos.getSelectedItem().toString().split(" - ");
            String codigo = datosProducto[0];
            int cantidad = Integer.parseInt(txtCantidad.getText());

            // Buscar producto en el sistema
            Producto producto = ctrlProducto.buscarProductoPorCodigo(codigo);
            if (producto == null) {
                mostrarError("Producto no encontrado");
                return;
            }

            // Validar cantidad
            if (cantidad <= 0) {
                mostrarError("Cantidad debe ser mayor a cero");
                return;
            }

            // Validar stock disponible
            if (cantidad > producto.getStock()) {
                mostrarError("Stock insuficiente. Disponible: " + producto.getStock());
                return;
            }

            // Calcular subtotal
            double subtotal = producto.getPrecio() * cantidad;

            // Agregar a la tabla visual
            modeloTabla.addRow(new Object[]{
                producto.getCodigo(),
                producto.getNombre(),
                cantidad,
                formatCurrency(producto.getPrecio()),
                formatCurrency(subtotal)
            });

            // Agregar a la factura (actualiza stock automáticamente)
            ctrlFactura.agregarItemAFactura(producto, cantidad);

            // Actualizar totales y limpiar campo
            actualizarTotales();
            txtCantidad.setText("");

        } catch (NumberFormatException e) {
            mostrarError("La cantidad debe ser un número válido");
        }

    }//GEN-LAST:event_btnAgregarProductoActionPerformed

    private void btnFinalizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarVentaActionPerformed
        // TODO add your handling code here:

        // Validar que haya productos
        if (modeloTabla.getRowCount() == 0) {
            mostrarError("No hay productos en la factura");
            return;
        }

        // Validar que haya cliente seleccionado
        if (txtDniCliente.getText().isEmpty()) {
            mostrarError("Seleccione un cliente primero");
            return;
        }

        // Confirmar con el usuario
        int confirmacion = JOptionPane.showConfirmDialog(
                this,
                "¿Confirmar generación de factura por "
                + formatCurrency(ctrlFactura.getFacturaActual().getTotal()) + "?",
                "Confirmar",
                JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                // Guardar factura
                ctrlFactura.guardarFactura();

                // Mostrar mensaje de éxito
                mostrarMensaje("Factura #" + ctrlFactura.getFacturaActual().getNumero() + " generada exitosamente");

                // Limpiar formulario y actualizar datos
                limpiarFormulario();
                cargarProductos(); // Actualizar stocks visualmente

            } catch (Exception e) {
                mostrarError("Error al guardar factura: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_btnFinalizarVentaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        Principal principal = new Principal();
        principal.setVisible(true);
        principal.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cargarDatosCliente(String dni) {
        Cliente cliente = ctrlCliente.buscarClientePorDni(dni);
        if (cliente != null) {
            txtDniCliente.setText(cliente.getDni());
            txtNombreCliente.setText(cliente.getNombres());
            txtApellidoCliente.setText(cliente.getApellidos());
            txtTelefonoCliente.setText(cliente.getTelefono());
            txtDireccionCliente.setText(cliente.getDireccion());

            // Crear nueva factura para este cliente
            ctrlFactura.crearFactura(cliente);
        }
    }

    // Actualiza los totales en la interfaz
    private void actualizarTotales() {
        if (ctrlFactura.getFacturaActual() != null) {
            lblSubtotal.setText("Subtotal: " + formatCurrency(ctrlFactura.getFacturaActual().getSubtotal()));
            lblIva12.setText("IVA 12%: " + formatCurrency(ctrlFactura.getFacturaActual().getIva()));
            lblTotal.setText("TOTAL: " + formatCurrency(ctrlFactura.getFacturaActual().getTotal()));
        }
    }

    // Versión sobrecargada para inicialización
    private void actualizarTotales(double subtotal, double iva, double total) {
        lblSubtotal.setText("Subtotal: " + formatCurrency(subtotal));
        lblIva12.setText("IVA 12%: " + formatCurrency(iva));
        lblTotal.setText("TOTAL: " + formatCurrency(total));
    }

    // Limpia el formulario para nueva factura
    private void limpiarFormulario() {
        modeloTabla.setRowCount(0);
        txtDniCliente.setText("");
        txtNombreCliente.setText("");
        txtApellidoCliente.setText("");
        txtTelefonoCliente.setText("");
        txtDireccionCliente.setText("");
        actualizarTotales(0.0, 0.0, 0.0);
        comboClientes.setSelectedIndex(-1);
        comboProductos.setSelectedIndex(-1);
    }

    // Formatea valores como moneda
    private String formatCurrency(double valor) {
        return NumberFormat.getCurrencyInstance().format(valor);
    }

    // Muestra mensaje de error
    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Muestra mensaje informativo
    private void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Información", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new GenerarFactura().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnFinalizarVenta;
    private javax.swing.JComboBox<String> comboClientes;
    private javax.swing.JComboBox<String> comboProductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIva12;
    private javax.swing.JLabel lblSubtotal;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tablaFactura;
    private javax.swing.JTextField txtApellidoCliente;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtDireccionCliente;
    private javax.swing.JTextField txtDniCliente;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtTelefonoCliente;
    // End of variables declaration//GEN-END:variables
}
